
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  logo: 'logo',
  businessType: 'businessType',
  timezone: 'timezone',
  defaultCurrency: 'defaultCurrency',
  status: 'status',
  subscriptionPlan: 'subscriptionPlan',
  subscriptionExpiresAt: 'subscriptionExpiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.LicenseScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  status: 'status',
  startDate: 'startDate',
  expiresAt: 'expiresAt',
  features: 'features',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  daysRemaining: 'daysRemaining',
  lastChecked: 'lastChecked',
  renewedAt: 'renewedAt',
  totalDays: 'totalDays'
};

exports.Prisma.BranchScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  name: 'name',
  phone: 'phone',
  email: 'email',
  address: 'address',
  city: 'city',
  country: 'country',
  latitude: 'latitude',
  longitude: 'longitude',
  isDefault: 'isDefault',
  isActive: 'isActive',
  allowsOnlineOrders: 'allowsOnlineOrders',
  allowsDelivery: 'allowsDelivery',
  allowsPickup: 'allowsPickup',
  timezone: 'timezone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  nameAr: 'nameAr',
  openTime: 'openTime',
  closeTime: 'closeTime'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  avatarUrl: 'avatarUrl',
  passwordHash: 'passwordHash',
  pin: 'pin',
  emailVerifiedAt: 'emailVerifiedAt',
  role: 'role',
  status: 'status',
  companyId: 'companyId',
  branchId: 'branchId',
  language: 'language',
  timezone: 'timezone',
  lastLoginAt: 'lastLoginAt',
  lastLoginIp: 'lastLoginIp',
  failedLoginAttempts: 'failedLoginAttempts',
  lockedUntil: 'lockedUntil',
  mustChangePassword: 'mustChangePassword',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  firstName: 'firstName',
  lastName: 'lastName',
  username: 'username'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tokenHash: 'tokenHash',
  refreshTokenHash: 'refreshTokenHash',
  expiresAt: 'expiresAt',
  refreshExpiresAt: 'refreshExpiresAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  deviceType: 'deviceType',
  isActive: 'isActive',
  revokedAt: 'revokedAt',
  createdAt: 'createdAt',
  lastUsedAt: 'lastUsedAt'
};

exports.Prisma.UserActivityLogScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  resourceType: 'resourceType',
  resourceId: 'resourceId',
  description: 'description',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  success: 'success',
  errorMessage: 'errorMessage',
  timestamp: 'timestamp'
};

exports.Prisma.MenuCategoryScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  name: 'name',
  description: 'description',
  image: 'image',
  displayNumber: 'displayNumber',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.MenuProductScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  categoryId: 'categoryId',
  name: 'name',
  description: 'description',
  image: 'image',
  slug: 'slug',
  basePrice: 'basePrice',
  pricing: 'pricing',
  cost: 'cost',
  status: 'status',
  priority: 'priority',
  preparationTime: 'preparationTime',
  pricingMethod: 'pricingMethod',
  sellingMethod: 'sellingMethod',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy',
  images: 'images'
};

exports.Prisma.ProductImageScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  filename: 'filename',
  originalName: 'originalName',
  url: 'url',
  size: 'size',
  width: 'width',
  height: 'height',
  mimeType: 'mimeType',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ModifierCategoryScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  name: 'name',
  description: 'description',
  displayNumber: 'displayNumber',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  isRequired: 'isRequired',
  maxSelections: 'maxSelections',
  minSelections: 'minSelections',
  selectionType: 'selectionType'
};

exports.Prisma.ModifierScalarFieldEnum = {
  id: 'id',
  modifierCategoryId: 'modifierCategoryId',
  companyId: 'companyId',
  name: 'name',
  description: 'description',
  basePrice: 'basePrice',
  pricing: 'pricing',
  cost: 'cost',
  status: 'status',
  displayNumber: 'displayNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  image: 'image',
  isDefault: 'isDefault'
};

exports.Prisma.ProductModifierCategoryScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  modifierCategoryId: 'modifierCategoryId',
  minQuantity: 'minQuantity',
  maxQuantity: 'maxQuantity',
  priceOverride: 'priceOverride',
  isRequired: 'isRequired',
  displayOrder: 'displayOrder',
  createdAt: 'createdAt'
};

exports.Prisma.PromotionScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  name: 'name',
  description: 'description',
  promotionType: 'promotionType',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  autoRevert: 'autoRevert',
  platforms: 'platforms',
  minProfitMargin: 'minProfitMargin',
  originalPricingSnapshot: 'originalPricingSnapshot',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy'
};

exports.Prisma.PromotionProductScalarFieldEnum = {
  id: 'id',
  promotionId: 'promotionId',
  productId: 'productId',
  baseDiscountType: 'baseDiscountType',
  baseDiscountValue: 'baseDiscountValue',
  createdAt: 'createdAt'
};

exports.Prisma.PromotionModifierMarkupScalarFieldEnum = {
  id: 'id',
  promotionId: 'promotionId',
  productId: 'productId',
  modifierId: 'modifierId',
  markupPercentage: 'markupPercentage',
  originalPrice: 'originalPrice',
  markedUpPrice: 'markedUpPrice',
  profitMargin: 'profitMargin',
  businessReason: 'businessReason',
  createdAt: 'createdAt'
};

exports.Prisma.PriceHistoryScalarFieldEnum = {
  id: 'id',
  entityType: 'entityType',
  entityId: 'entityId',
  promotionId: 'promotionId',
  oldPrice: 'oldPrice',
  newPrice: 'newPrice',
  changeReason: 'changeReason',
  platform: 'platform',
  createdAt: 'createdAt',
  createdBy: 'createdBy'
};

exports.Prisma.License_audit_logsScalarFieldEnum = {
  id: 'id',
  license_id: 'license_id',
  action: 'action',
  old_data: 'old_data',
  new_data: 'new_data',
  user_id: 'user_id',
  timestamp: 'timestamp'
};

exports.Prisma.License_invoicesScalarFieldEnum = {
  id: 'id',
  license_id: 'license_id',
  invoice_number: 'invoice_number',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  created_at: 'created_at',
  due_date: 'due_date',
  paid_at: 'paid_at',
  payment_method: 'payment_method',
  company_id: 'company_id',
  duration_days: 'duration_days',
  issued_at: 'issued_at',
  due_at: 'due_at',
  metadata: 'metadata',
  created_by: 'created_by'
};

exports.Prisma.DeliveryZoneScalarFieldEnum = {
  id: 'id',
  branchId: 'branchId',
  zoneName: 'zoneName',
  zoneNameSlug: 'zoneNameSlug',
  deliveryFee: 'deliveryFee',
  averageDeliveryTimeMins: 'averageDeliveryTimeMins',
  priorityLevel: 'priorityLevel',
  isActive: 'isActive',
  polygon: 'polygon',
  centerLat: 'centerLat',
  centerLng: 'centerLng',
  radius: 'radius',
  globalLocationId: 'globalLocationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.GlobalLocationScalarFieldEnum = {
  id: 'id',
  countryName: 'countryName',
  countryNameAr: 'countryNameAr',
  governorate: 'governorate',
  city: 'city',
  cityNameAr: 'cityNameAr',
  area: 'area',
  areaNameAr: 'areaNameAr',
  subArea: 'subArea',
  subAreaNameAr: 'subAreaNameAr',
  latitude: 'latitude',
  longitude: 'longitude',
  searchText: 'searchText',
  isActive: 'isActive',
  deliveryDifficulty: 'deliveryDifficulty',
  averageDeliveryFee: 'averageDeliveryFee',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JordanLocationScalarFieldEnum = {
  id: 'id',
  governorate: 'governorate',
  city: 'city',
  district: 'district',
  areaNameEn: 'areaNameEn',
  areaNameAr: 'areaNameAr',
  postalCode: 'postalCode',
  deliveryDifficulty: 'deliveryDifficulty',
  averageDeliveryFee: 'averageDeliveryFee',
  lat: 'lat',
  lng: 'lng',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeliveryProviderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  displayName: 'displayName',
  apiBaseUrl: 'apiBaseUrl',
  apiKey: 'apiKey',
  isActive: 'isActive',
  priority: 'priority',
  supportedAreas: 'supportedAreas',
  avgDeliveryTime: 'avgDeliveryTime',
  baseFee: 'baseFee',
  feePerKm: 'feePerKm',
  maxDistance: 'maxDistance',
  companyId: 'companyId',
  webhookUrl: 'webhookUrl',
  configuration: 'configuration',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeliveryProviderOrderScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  branchId: 'branchId',
  deliveryProviderId: 'deliveryProviderId',
  providerOrderId: 'providerOrderId',
  orderNumber: 'orderNumber',
  orderStatus: 'orderStatus',
  orderDetails: 'orderDetails',
  customerDetails: 'customerDetails',
  deliveryAddress: 'deliveryAddress',
  webhookData: 'webhookData',
  isProcessed: 'isProcessed',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  trackingNumber: 'trackingNumber',
  estimatedDeliveryTime: 'estimatedDeliveryTime',
  actualDeliveryTime: 'actualDeliveryTime',
  deliveryAttempts: 'deliveryAttempts',
  failureReason: 'failureReason',
  providerFeeCharged: 'providerFeeCharged',
  webhookRetries: 'webhookRetries',
  lastStatusCheck: 'lastStatusCheck'
};

exports.Prisma.CompanyProviderConfigScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  providerType: 'providerType',
  configuration: 'configuration',
  credentials: 'credentials',
  isActive: 'isActive',
  priority: 'priority',
  maxDistance: 'maxDistance',
  baseFee: 'baseFee',
  feePerKm: 'feePerKm',
  avgDeliveryTime: 'avgDeliveryTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.BranchProviderMappingScalarFieldEnum = {
  id: 'id',
  branchId: 'branchId',
  companyProviderConfigId: 'companyProviderConfigId',
  providerBranchId: 'providerBranchId',
  providerSiteId: 'providerSiteId',
  branchConfiguration: 'branchConfiguration',
  isActive: 'isActive',
  priority: 'priority',
  minOrderValue: 'minOrderValue',
  maxOrderValue: 'maxOrderValue',
  supportedPaymentMethods: 'supportedPaymentMethods',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ProviderOrderLogScalarFieldEnum = {
  id: 'id',
  companyProviderConfigId: 'companyProviderConfigId',
  branchId: 'branchId',
  orderId: 'orderId',
  providerOrderId: 'providerOrderId',
  orderStatus: 'orderStatus',
  requestPayload: 'requestPayload',
  responsePayload: 'responsePayload',
  webhookPayload: 'webhookPayload',
  errorMessage: 'errorMessage',
  processingTimeMs: 'processingTimeMs',
  apiEndpoint: 'apiEndpoint',
  httpStatusCode: 'httpStatusCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeliveryErrorLogScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  providerType: 'providerType',
  errorType: 'errorType',
  errorCode: 'errorCode',
  errorMessage: 'errorMessage',
  requestPayload: 'requestPayload',
  responsePayload: 'responsePayload',
  retryCount: 'retryCount',
  resolvedAt: 'resolvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WebhookDeliveryLogScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  providerType: 'providerType',
  webhookType: 'webhookType',
  orderId: 'orderId',
  payload: 'payload',
  status: 'status',
  processingAttempts: 'processingAttempts',
  processedAt: 'processedAt',
  errorMessage: 'errorMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DeliveryProviderAnalyticsScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  providerType: 'providerType',
  date: 'date',
  totalOrders: 'totalOrders',
  successfulOrders: 'successfulOrders',
  failedOrders: 'failedOrders',
  cancelledOrders: 'cancelledOrders',
  totalRevenue: 'totalRevenue',
  totalDeliveryFee: 'totalDeliveryFee',
  averageDeliveryTime: 'averageDeliveryTime',
  customerRatingsSum: 'customerRatingsSum',
  customerRatingsCount: 'customerRatingsCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  branchId: 'branchId',
  deliveryZoneId: 'deliveryZoneId',
  deliveryProviderId: 'deliveryProviderId',
  customerName: 'customerName',
  customerPhone: 'customerPhone',
  customerEmail: 'customerEmail',
  deliveryAddress: 'deliveryAddress',
  deliveryLat: 'deliveryLat',
  deliveryLng: 'deliveryLng',
  orderType: 'orderType',
  status: 'status',
  subtotal: 'subtotal',
  deliveryFee: 'deliveryFee',
  taxAmount: 'taxAmount',
  totalAmount: 'totalAmount',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  estimatedDeliveryTime: 'estimatedDeliveryTime',
  actualDeliveryTime: 'actualDeliveryTime',
  providerOrderId: 'providerOrderId',
  providerTrackingUrl: 'providerTrackingUrl',
  driverInfo: 'driverInfo',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deliveredAt: 'deliveredAt',
  cancelledAt: 'cancelledAt',
  cancellationReason: 'cancellationReason'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  id: 'id',
  orderId: 'orderId',
  productId: 'productId',
  productName: 'productName',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  totalPrice: 'totalPrice',
  modifiers: 'modifiers',
  specialRequests: 'specialRequests',
  createdAt: 'createdAt'
};

exports.Prisma.PrinterScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  connection: 'connection',
  ip: 'ip',
  port: 'port',
  manufacturer: 'manufacturer',
  model: 'model',
  location: 'location',
  paperWidth: 'paperWidth',
  assignedTo: 'assignedTo',
  isDefault: 'isDefault',
  status: 'status',
  capabilities: 'capabilities',
  lastSeen: 'lastSeen',
  companyId: 'companyId',
  branchId: 'branchId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PrintJobScalarFieldEnum = {
  id: 'id',
  type: 'type',
  printerId: 'printerId',
  content: 'content',
  status: 'status',
  priority: 'priority',
  orderId: 'orderId',
  companyId: 'companyId',
  branchId: 'branchId',
  userId: 'userId',
  attempts: 'attempts',
  processingTime: 'processingTime',
  error: 'error',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  failedAt: 'failedAt'
};

exports.Prisma.PrintTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  type: 'type',
  template: 'template',
  isDefault: 'isDefault',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.CompanyStatus = exports.$Enums.CompanyStatus = {
  active: 'active',
  inactive: 'inactive',
  suspended: 'suspended',
  trial: 'trial'
};

exports.LicenseStatus = exports.$Enums.LicenseStatus = {
  active: 'active',
  expired: 'expired',
  suspended: 'suspended',
  cancelled: 'cancelled'
};

exports.UserRole = exports.$Enums.UserRole = {
  super_admin: 'super_admin',
  company_owner: 'company_owner',
  branch_manager: 'branch_manager',
  cashier: 'cashier',
  call_center: 'call_center'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  active: 'active',
  inactive: 'inactive',
  suspended: 'suspended',
  pending: 'pending'
};

exports.ModifierSelectionType = exports.$Enums.ModifierSelectionType = {
  single: 'single',
  multiple: 'multiple',
  counter: 'counter'
};

exports.OrderType = exports.$Enums.OrderType = {
  delivery: 'delivery',
  pickup: 'pickup',
  dine_in: 'dine_in'
};

exports.OrderStatus = exports.$Enums.OrderStatus = {
  pending: 'pending',
  confirmed: 'confirmed',
  preparing: 'preparing',
  ready_for_pickup: 'ready_for_pickup',
  out_for_delivery: 'out_for_delivery',
  delivered: 'delivered',
  cancelled: 'cancelled',
  refunded: 'refunded'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  cash: 'cash',
  card: 'card',
  online: 'online',
  wallet: 'wallet'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  pending: 'pending',
  paid: 'paid',
  failed: 'failed',
  refunded: 'refunded'
};

exports.PrinterType = exports.$Enums.PrinterType = {
  thermal: 'thermal',
  receipt: 'receipt',
  kitchen: 'kitchen',
  label: 'label'
};

exports.PrinterConnection = exports.$Enums.PrinterConnection = {
  network: 'network',
  usb: 'usb',
  bluetooth: 'bluetooth'
};

exports.PrinterAssignment = exports.$Enums.PrinterAssignment = {
  kitchen: 'kitchen',
  cashier: 'cashier',
  bar: 'bar',
  all: 'all'
};

exports.PrinterStatus = exports.$Enums.PrinterStatus = {
  online: 'online',
  offline: 'offline',
  error: 'error',
  unknown: 'unknown'
};

exports.PrintJobType = exports.$Enums.PrintJobType = {
  receipt: 'receipt',
  kitchen_order: 'kitchen_order',
  label: 'label',
  test: 'test'
};

exports.PrintJobStatus = exports.$Enums.PrintJobStatus = {
  pending: 'pending',
  printing: 'printing',
  completed: 'completed',
  failed: 'failed'
};

exports.Prisma.ModelName = {
  Company: 'Company',
  License: 'License',
  Branch: 'Branch',
  User: 'User',
  UserSession: 'UserSession',
  UserActivityLog: 'UserActivityLog',
  MenuCategory: 'MenuCategory',
  MenuProduct: 'MenuProduct',
  ProductImage: 'ProductImage',
  ModifierCategory: 'ModifierCategory',
  Modifier: 'Modifier',
  ProductModifierCategory: 'ProductModifierCategory',
  Promotion: 'Promotion',
  PromotionProduct: 'PromotionProduct',
  PromotionModifierMarkup: 'PromotionModifierMarkup',
  PriceHistory: 'PriceHistory',
  license_audit_logs: 'license_audit_logs',
  license_invoices: 'license_invoices',
  DeliveryZone: 'DeliveryZone',
  GlobalLocation: 'GlobalLocation',
  JordanLocation: 'JordanLocation',
  DeliveryProvider: 'DeliveryProvider',
  DeliveryProviderOrder: 'DeliveryProviderOrder',
  CompanyProviderConfig: 'CompanyProviderConfig',
  BranchProviderMapping: 'BranchProviderMapping',
  ProviderOrderLog: 'ProviderOrderLog',
  DeliveryErrorLog: 'DeliveryErrorLog',
  WebhookDeliveryLog: 'WebhookDeliveryLog',
  DeliveryProviderAnalytics: 'DeliveryProviderAnalytics',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Printer: 'Printer',
  PrintJob: 'PrintJob',
  PrintTemplate: 'PrintTemplate'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)

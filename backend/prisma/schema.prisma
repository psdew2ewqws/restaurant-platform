generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                    String        @id @default(uuid())
  name                  String
  slug                  String        @unique
  logo                  String?
  businessType          String?       @default("restaurant") @map("business_type")
  timezone              String        @default("Asia/Amman")
  defaultCurrency       String        @default("JOD") @map("default_currency")
  status                CompanyStatus @default(trial)
  subscriptionPlan      String?       @default("basic") @map("subscription_plan")
  subscriptionExpiresAt DateTime?     @map("subscription_expires_at")
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  deletedAt             DateTime?     @map("deleted_at")
  createdBy             String?       @map("created_by")
  updatedBy             String?       @map("updated_by")
  branches              Branch[]
  users                 User[]
  licenses              License[]

  @@map("companies")
}

model License {
  id            String        @id @default(uuid())
  companyId     String        @map("company_id")
  type          LicenseType   @default(trial)
  status        LicenseStatus @default(active)
  startDate     DateTime      @default(now()) @map("start_date")
  expiresAt     DateTime      @map("expires_at")
  daysRemaining Int           @default(0) @map("days_remaining") // Calculated field updated daily
  totalDays     Int           @default(30) @map("total_days") // Total licensed days
  features      Json?         // JSON array of enabled features
  lastChecked   DateTime?     @map("last_checked") // Last time license status was checked
  renewedAt     DateTime?     @map("renewed_at") // Last renewal date
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  createdBy     String?       @map("created_by")
  updatedBy     String?       @map("updated_by")
  company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("licenses")
}

model Branch {
  id                 String    @id @default(uuid())
  companyId          String    @map("company_id")
  name               String
  nameAr             String    @map("name_ar")
  phone              String?
  email              String?
  address            String?
  city               String?
  country            String?
  latitude           Decimal?  @db.Decimal(10, 8)
  longitude          Decimal?  @db.Decimal(11, 8)
  openTime           String?   @map("open_time")
  closeTime          String?   @map("close_time")
  isDefault          Boolean   @default(false) @map("is_default")
  isActive           Boolean   @default(true) @map("is_active")
  allowsOnlineOrders Boolean   @default(true) @map("allows_online_orders")
  allowsDelivery     Boolean   @default(true) @map("allows_delivery")
  allowsPickup       Boolean   @default(true) @map("allows_pickup")
  timezone           String    @default("Asia/Amman")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at")
  createdBy          String?   @map("created_by")
  updatedBy          String?   @map("updated_by")
  company            Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  users              User[]

  @@map("branches")
}

model User {
  id                  String            @id @default(uuid())
  name                String
  firstName           String?           @map("first_name")
  lastName            String?           @map("last_name")
  email               String            @unique
  username            String?           @unique
  phone               String?
  avatarUrl           String?           @map("avatar_url")
  passwordHash        String            @map("password_hash")
  pin                 String?
  emailVerifiedAt     DateTime?         @map("email_verified_at")
  role                UserRole
  status              UserStatus        @default(active)
  companyId           String            @map("company_id")
  branchId            String?           @map("branch_id")
  language            String            @default("en")
  timezone            String            @default("Asia/Amman")
  lastLoginAt         DateTime?         @map("last_login_at")
  lastLoginIp         String?           @map("last_login_ip")
  failedLoginAttempts Int               @default(0) @map("failed_login_attempts")
  lockedUntil         DateTime?         @map("locked_until")
  mustChangePassword  Boolean           @default(false) @map("must_change_password")
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")
  deletedAt           DateTime?         @map("deleted_at")
  createdBy           String?           @map("created_by")
  updatedBy           String?           @map("updated_by")
  activityLogs        UserActivityLog[]
  sessions            UserSession[]
  branch              Branch?           @relation(fields: [branchId], references: [id])
  company             Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("users")
}

model UserSession {
  id               String    @id @default(uuid())
  userId           String    @map("user_id")
  tokenHash        String    @unique @map("token_hash")
  refreshTokenHash String?   @unique @map("refresh_token_hash")
  expiresAt        DateTime  @map("expires_at")
  refreshExpiresAt DateTime? @map("refresh_expires_at")
  ipAddress        String?   @map("ip_address")
  userAgent        String?   @map("user_agent")
  deviceType       String?   @map("device_type")
  isActive         Boolean   @default(true) @map("is_active")
  revokedAt        DateTime? @map("revoked_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  lastUsedAt       DateTime  @default(now()) @map("last_used_at")
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model UserActivityLog {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  action       String
  resourceType String?  @map("resource_type")
  resourceId   String?  @map("resource_id")
  description  String?
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  success      Boolean  @default(true)
  errorMessage String?  @map("error_message")
  timestamp    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activity_logs")
}

enum UserRole {
  super_admin
  company_owner
  branch_manager
  cashier
  call_center

  @@map("user_role")
}

enum UserStatus {
  active
  inactive
  suspended
  pending

  @@map("user_status")
}

enum CompanyStatus {
  active
  inactive
  suspended
  trial

  @@map("company_status")
}

enum LicenseType {
  trial
  active
  premium

  @@map("license_type")
}

enum LicenseStatus {
  active
  expired
  suspended
  cancelled

  @@map("license_status")
}

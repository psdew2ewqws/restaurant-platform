generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                    String             @id @default(uuid())
  name                  String
  slug                  String             @unique
  logo                  String?
  businessType          String?            @default("restaurant") @map("business_type")
  timezone              String             @default("Asia/Amman")
  defaultCurrency       String             @default("JOD") @map("default_currency")
  status                CompanyStatus      @default(trial)
  subscriptionPlan      String?            @default("basic") @map("subscription_plan")
  subscriptionExpiresAt DateTime?          @map("subscription_expires_at")
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @updatedAt @map("updated_at")
  deletedAt             DateTime?          @map("deleted_at")
  createdBy             String?            @map("created_by")
  updatedBy             String?            @map("updated_by")
  branches              Branch[]
  licenses              License[]
  menuCategories        MenuCategory[]
  menuProducts          MenuProduct[]
  modifierCategories    ModifierCategory[]
  modifiers             Modifier[]
  promotions            Promotion[]
  users                 User[]

  @@map("companies")
}

model License {
  id            String        @id @default(uuid())
  companyId     String        @map("company_id")
  status        LicenseStatus @default(active)
  startDate     DateTime      @default(now()) @map("start_date")
  expiresAt     DateTime      @map("expires_at")
  features      Json?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  createdBy     String?       @map("created_by")
  updatedBy     String?       @map("updated_by")
  daysRemaining Int           @default(0) @map("days_remaining")
  lastChecked   DateTime?     @map("last_checked")
  renewedAt     DateTime?     @map("renewed_at")
  totalDays     Int           @default(30) @map("total_days")
  company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("licenses")
}

model Branch {
  id                 String    @id @default(uuid())
  companyId          String    @map("company_id")
  name               String
  phone              String?
  email              String?
  address            String?
  city               String?
  country            String?
  latitude           Decimal?  @db.Decimal(10, 8)
  longitude          Decimal?  @db.Decimal(11, 8)
  isDefault          Boolean   @default(false) @map("is_default")
  isActive           Boolean   @default(true) @map("is_active")
  allowsOnlineOrders Boolean   @default(true) @map("allows_online_orders")
  allowsDelivery     Boolean   @default(true) @map("allows_delivery")
  allowsPickup       Boolean   @default(true) @map("allows_pickup")
  timezone           String    @default("Asia/Amman")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  deletedAt          DateTime? @map("deleted_at")
  createdBy          String?   @map("created_by")
  updatedBy          String?   @map("updated_by")
  nameAr             String    @map("name_ar")
  openTime           String?   @map("open_time")
  closeTime          String?   @map("close_time")
  company            Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  users              User[]

  @@map("branches")
}

model User {
  id                  String            @id @default(uuid())
  name                String
  email               String            @unique
  phone               String?
  avatarUrl           String?           @map("avatar_url")
  passwordHash        String            @map("password_hash")
  pin                 String?
  emailVerifiedAt     DateTime?         @map("email_verified_at")
  role                UserRole
  status              UserStatus        @default(active)
  companyId           String            @map("company_id")
  branchId            String?           @map("branch_id")
  language            String            @default("en")
  timezone            String            @default("Asia/Amman")
  lastLoginAt         DateTime?         @map("last_login_at")
  lastLoginIp         String?           @map("last_login_ip")
  failedLoginAttempts Int               @default(0) @map("failed_login_attempts")
  lockedUntil         DateTime?         @map("locked_until")
  mustChangePassword  Boolean           @default(false) @map("must_change_password")
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")
  deletedAt           DateTime?         @map("deleted_at")
  createdBy           String?           @map("created_by")
  updatedBy           String?           @map("updated_by")
  firstName           String?           @map("first_name")
  lastName            String?           @map("last_name")
  username            String?           @unique
  activityLogs        UserActivityLog[]
  sessions            UserSession[]
  branch              Branch?           @relation(fields: [branchId], references: [id])
  company             Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("users")
}

model UserSession {
  id               String    @id @default(uuid())
  userId           String    @map("user_id")
  tokenHash        String    @unique @map("token_hash")
  refreshTokenHash String?   @unique @map("refresh_token_hash")
  expiresAt        DateTime  @map("expires_at")
  refreshExpiresAt DateTime? @map("refresh_expires_at")
  ipAddress        String?   @map("ip_address")
  userAgent        String?   @map("user_agent")
  deviceType       String?   @map("device_type")
  isActive         Boolean   @default(true) @map("is_active")
  revokedAt        DateTime? @map("revoked_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  lastUsedAt       DateTime  @default(now()) @map("last_used_at")
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model UserActivityLog {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  action       String
  resourceType String?  @map("resource_type")
  resourceId   String?  @map("resource_id")
  description  String?
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  success      Boolean  @default(true)
  errorMessage String?  @map("error_message")
  timestamp    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activity_logs")
}

model MenuCategory {
  id            String        @id @default(uuid())
  companyId     String        @map("company_id")
  name          Json
  description   Json?
  image         String?
  displayNumber Int           @default(0) @map("display_number")
  isActive      Boolean       @default(true) @map("is_active")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  deletedAt     DateTime?     @map("deleted_at")
  createdBy     String?       @map("created_by")
  updatedBy     String?       @map("updated_by")
  company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  products      MenuProduct[]

  @@map("menu_categories")
  @@index([companyId, isActive, displayNumber]) // Multi-tenant category listing
}

model MenuProduct {
  id                         String                      @id @default(uuid())
  companyId                  String                      @map("company_id")
  categoryId                 String?                     @map("category_id")
  name                       Json
  description                Json?
  image                      String?
  images                     String[]                    @default([])
  slug                       String?
  basePrice                  Decimal                     @map("base_price") @db.Decimal(10, 2)
  pricing                    Json                        @default("{}")
  cost                       Decimal                     @default(0) @db.Decimal(10, 2)
  status                     Int                         @default(1)
  priority                   Int                         @default(0)
  preparationTime            Int                         @default(15) @map("preparation_time")
  pricingMethod              Int                         @default(1) @map("pricing_method")
  sellingMethod              Int                         @default(1) @map("selling_method")
  tags                       String[]                    @default([])
  createdAt                  DateTime                    @default(now()) @map("created_at")
  updatedAt                  DateTime                    @updatedAt @map("updated_at")
  deletedAt                  DateTime?                   @map("deleted_at")
  createdBy                  String?                     @map("created_by")
  updatedBy                  String?                     @map("updated_by")
  category                   MenuCategory?               @relation(fields: [categoryId], references: [id])
  company                    Company                     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  modifierCategories         ProductModifierCategory[]
  promotionModifierMarkups   PromotionModifierMarkup[]
  promotionProducts          PromotionProduct[]

  productImages              ProductImage[]

  @@map("menu_products")
  @@index([companyId, status]) // Multi-tenant performance index
  @@index([companyId, categoryId, priority]) // Category browsing index
  @@index([companyId, createdAt]) // Recent products index
}

model ProductImage {
  id            String      @id @default(uuid())
  productId     String?     @map("product_id")
  filename      String
  originalName  String      @map("original_name")
  url           String
  size          Int         // File size in bytes
  width         Int         // Image width
  height        Int         // Image height
  mimeType      String      @map("mime_type")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  product       MenuProduct? @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
  @@index([productId])
  @@index([createdAt])
}

model ModifierCategory {
  id                String                    @id @default(uuid())
  companyId         String                    @map("company_id")
  name              Json
  description       Json?
  displayNumber     Int                       @default(0) @map("display_number")
  image             String?
  selectionType     ModifierSelectionType     @default(single) @map("selection_type")
  isRequired        Boolean                   @default(false) @map("is_required")
  minSelections     Int                       @default(0) @map("min_selections")
  maxSelections     Int                       @default(1) @map("max_selections")
  createdAt         DateTime                  @default(now()) @map("created_at")
  updatedAt         DateTime                  @updatedAt @map("updated_at")
  deletedAt         DateTime?                 @map("deleted_at")
  company           Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  modifiers         Modifier[]
  productCategories ProductModifierCategory[]

  @@map("modifier_categories")
}

model Modifier {
  id                 String                      @id @default(uuid())
  modifierCategoryId String                      @map("modifier_category_id")
  companyId          String                      @map("company_id")
  name               Json
  description        Json?
  basePrice          Decimal                     @map("base_price") @db.Decimal(10, 2)
  pricing            Json                        @default("{}")
  cost               Decimal                     @default(0) @db.Decimal(10, 2)
  status             Int                         @default(1)
  displayNumber      Int                         @default(0) @map("display_number")
  isDefault          Boolean                     @default(false) @map("is_default")
  image              String?
  createdAt          DateTime                    @default(now()) @map("created_at")
  updatedAt          DateTime                    @updatedAt @map("updated_at")
  deletedAt          DateTime?                   @map("deleted_at")
  company            Company                   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  modifierCategory   ModifierCategory          @relation(fields: [modifierCategoryId], references: [id], onDelete: Cascade)
  promotionMarkups   PromotionModifierMarkup[]

  @@map("modifiers")
}

model ProductModifierCategory {
  id                 String           @id @default(uuid())
  productId          String           @map("product_id")
  modifierCategoryId String           @map("modifier_category_id")
  minQuantity        Int              @default(0) @map("min_quantity")
  maxQuantity        Int              @default(1) @map("max_quantity")
  priceOverride      Decimal?         @map("price_override") @db.Decimal(10, 2)
  isRequired         Boolean          @default(false) @map("is_required")
  displayOrder       Int              @default(0) @map("display_order")
  createdAt          DateTime         @default(now()) @map("created_at")
  modifierCategory   ModifierCategory @relation(fields: [modifierCategoryId], references: [id], onDelete: Cascade)
  product            MenuProduct      @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_modifier_categories")
}

model Promotion {
  id                      String                      @id @default(uuid())
  companyId               String                      @map("company_id")
  name                    String
  description             String?
  promotionType           String                      @default("selective_product") @map("promotion_type")
  startDate               DateTime                    @map("start_date")
  endDate                 DateTime                    @map("end_date")
  isActive                Boolean                     @default(false) @map("is_active")
  autoRevert              Boolean                     @default(true) @map("auto_revert")
  platforms               Json                        @default("[\"all\"]")
  minProfitMargin         Decimal                     @default(15.00) @map("min_profit_margin") @db.Decimal(5, 2)
  originalPricingSnapshot Json?                       @map("original_pricing_snapshot")
  createdAt               DateTime                    @default(now()) @map("created_at")
  updatedAt               DateTime                    @updatedAt @map("updated_at")
  createdBy               String?                     @map("created_by")
  priceHistories          PriceHistory[]
  modifierMarkups         PromotionModifierMarkup[]
  promotionProducts       PromotionProduct[]
  company                 Company                     @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("promotions")
}

model PromotionProduct {
  id                String      @id @default(uuid())
  promotionId       String      @map("promotion_id")
  productId         String      @map("product_id")
  baseDiscountType  String      @default("percentage") @map("base_discount_type")
  baseDiscountValue Decimal     @map("base_discount_value") @db.Decimal(10, 2)
  createdAt         DateTime    @default(now()) @map("created_at")
  product           MenuProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  promotion         Promotion   @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  @@map("promotion_products")
}

model PromotionModifierMarkup {
  id               String      @id @default(uuid())
  promotionId      String      @map("promotion_id")
  productId        String      @map("product_id")
  modifierId       String      @map("modifier_id")
  markupPercentage Decimal     @map("markup_percentage") @db.Decimal(5, 2) // +25% markup to compensate
  originalPrice    Decimal     @map("original_price") @db.Decimal(10, 2)
  markedUpPrice    Decimal     @map("marked_up_price") @db.Decimal(10, 2)
  profitMargin     Decimal?    @map("profit_margin") @db.Decimal(5, 2)
  businessReason   String?     @map("business_reason") // "Compensate for 50% burger discount"
  createdAt        DateTime    @default(now()) @map("created_at")
  modifier         Modifier    @relation(fields: [modifierId], references: [id], onDelete: Cascade)
  product          MenuProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  promotion        Promotion   @relation(fields: [promotionId], references: [id], onDelete: Cascade)

  @@map("promotion_modifier_markups")
}

model PriceHistory {
  id           String     @id @default(uuid())
  entityType   String     @map("entity_type")
  entityId     String     @map("entity_id")
  promotionId  String?    @map("promotion_id")
  oldPrice     Decimal?   @map("old_price") @db.Decimal(10, 2)
  newPrice     Decimal?   @map("new_price") @db.Decimal(10, 2)
  changeReason String?    @map("change_reason")
  platform     String?
  createdAt    DateTime   @default(now()) @map("created_at")
  createdBy    String?    @map("created_by")
  promotion    Promotion? @relation(fields: [promotionId], references: [id])

  @@map("price_history")
}

enum UserRole {
  super_admin
  company_owner
  branch_manager
  cashier
  call_center

  @@map("user_role")
}

enum UserStatus {
  active
  inactive
  suspended
  pending

  @@map("user_status")
}

enum CompanyStatus {
  active
  inactive
  suspended
  trial

  @@map("company_status")
}

enum LicenseStatus {
  active
  expired
  suspended
  cancelled

  @@map("license_status")
}

enum ModifierSelectionType {
  single      // Radio buttons - max 1 selection
  multiple    // Checkboxes - multiple selections allowed
  counter     // Number input with +/- buttons

  @@map("modifier_selection_type")
}

name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: restaurant_platform_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        workspace: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.workspace }}/package-lock.json

      - name: Install dependencies
        run: |
          cd ${{ matrix.workspace }}
          npm ci

      - name: Lint code
        run: |
          cd ${{ matrix.workspace }}
          npm run lint

      - name: Type check (TypeScript)
        run: |
          cd ${{ matrix.workspace }}
          npm run type-check || npm run build

      - name: Setup database (Backend only)
        if: matrix.workspace == 'backend'
        run: |
          cd backend
          npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/restaurant_platform_test

      - name: Run tests
        run: |
          cd ${{ matrix.workspace }}
          npm run test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/restaurant_platform_test
          JWT_SECRET: test-jwt-secret-key-for-ci
          NODE_ENV: test

      - name: Run integration tests (Backend only)
        if: matrix.workspace == 'backend'
        run: |
          cd backend
          npm run test:integration || echo "Integration tests skipped"
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/restaurant_platform_test
          JWT_SECRET: test-jwt-secret-key-for-ci

  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: lint-and-test

    strategy:
      matrix:
        workspace: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.workspace }}/package-lock.json

      - name: Install dependencies
        run: |
          cd ${{ matrix.workspace }}
          npm ci

      - name: Build application
        run: |
          cd ${{ matrix.workspace }}
          npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001/api

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.workspace }}-build
          path: |
            ${{ matrix.workspace }}/dist
            ${{ matrix.workspace }}/.next
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit (Backend)
        run: |
          cd backend
          npm audit --audit-level moderate

      - name: Run security audit (Frontend)
        run: |
          cd frontend
          npm audit --audit-level moderate

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-backend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Deploy to staging environment
        run: |
          echo "Deploying to staging environment"
          # Add deployment steps here
          # Example: kubectl apply -f k8s/staging/
          # Example: docker-compose -f docker-compose.staging.yml up -d

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Deploy to production environment
        run: |
          echo "Deploying to production environment"
          # Add production deployment steps here
          # Example: kubectl apply -f k8s/production/
          # Example: Blue-green deployment strategy

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
            echo "Staging deployment successful"
          fi
          
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "Production deployment successful"
          fi
          
          # Add notification logic here
          # Example: Slack, Discord, or email notifications